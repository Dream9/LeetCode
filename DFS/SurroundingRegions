class Solution {
private:
    int _Row;
    int _Column;
public:
    void solve(vector<vector<char>>& board) {
        /*从边界处向内部dfs搜索,所有连通的都是O*/
        /*从内部向外部搜索，触碰到边界的都是O*/
        //
        int m=board.size();
        if(m==0)
            return;
        int n=board[0].size();
        if(n==0)
            return;
        _Row=m;
        _Column=n;
        
        //从四个边界向内部遍历
        //for(int i=0;i<m;++i){
        //    if(board[i][0]=='O')
        //        _Detect(board,i,0);
        //}
        //for(int i=0;i<m;++i){
        //    if(board[i][n-1]=='O')
        //        _Detect(board,i,n-1);
        //}
        //for(int i=1;i<n;++i){
        //    if(board[0][i]=='O')
        //        _Detect(board,0,i);
        //}
        //for(int i=1;i<n;++i){
        //    if(board[m-1][i]=='O')
        //        _Detect(board,m-1,i);
        //}
        //
        //循环合并
        for(int i=0;i<m;++i){
            if(board[i][0])=='O')
                _Detect(board,i,0);
            if(board[i][n-1]=='O')
                _Detect(board,i,n-1);
        }
        for(int i=1;i<n;++i){
            if(board[0][i]=='O')
                _Detect(board,0,i);
            if(board[m-1][i]=='O')
                _Detect(board,m-1,i);
        }
        
        //最后遍历一次进行校正
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if(board[i][j]=='O')
                    board[i][j]='X';
                else if(board[i][j]=='A')
                    board[i][j]='O';
            }
        }
    }
private:
    //遍历到的'O',都标记为'A'
    void _Detect(vector<vector<char>> &board,int row,int column){
        if(row<0 || row>=_Row || column<0 || column>=_Column || board[row][column]!='O'){
            return;
        }
        board[row][column]='A';
        _Detect(board,row,column-1);
        _Detect(board,row,column+1);
        _Detect(board,row-1,column);
        _Detect(board,row+1,column);
    }
};
