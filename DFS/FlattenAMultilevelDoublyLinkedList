/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;

    Node() {}

    Node(int _val, Node* _prev, Node* _next, Node* _child) {
        val = _val;
        prev = _prev;
        next = _next;
        child = _child;
    }
};
*/
class Solution {
public:
    Node* flatten(Node* head) {
        Node* tmp;
        return _flatten(head,&tmp);
    }
private:
    Node* _flatten(Node* head,Node**ret) {
        if(!head)
            return head;
        Node* cur=head;
        Node* pre=cur;
        while(cur){
            Node* next=cur->next;
            if(cur->child){
                Node* tmp;
                Node* _head=_flatten(cur->child,&tmp);
                
                //becare两个指针需要调节
                cur->next=_head;
                _head->prev=cur;
                
                if(next)
                    next->prev=tmp;
                tmp->next=next;
                
                cur->child=nullptr;
            }
            cur=next;
            pre=cur!=nullptr?cur:pre;
        }
        *ret=pre;
        return head;
    }
};
