class Solution {
public:
    int jump(vector<int>&nums) {
        /*还是太慢了*/
        /////////
        /*采用贪心的思想*/
        //在每一次跳中都选择最大跳跃位置，这样从状态k-->状态m,,如果状态m的最远距离超过了length()-1，则到达终点
        //如果状态m比状态k的距离等于，那么达不到终点
        int len=nums.size();
        if(len<=1)
            return 0;
        int pre=0;
        int cur=1;
        int step=0;
        
        while(cur>pre){
            ++step;
            int max_pos=cur-1;
            /*这里做了一个剪枝，只计算两次状态中新增的点*/
            for(;pre<cur;++pre){
                max_pos=max(max_pos,nums[pre]+pre);
            }
            if(max_pos>=len-1)
                return step;
            pre=cur;
            cur=max_pos+1;
        }
        //无解
        return -1;
    }
    
    
    /*TLE*/
    int _jump(vector<int>& nums) {
        /*求最少需要跳几次，很明显对应于BFS搜索，第一次调到终点时的层数*/
        int len=nums.size();
        if(len<=1)
            return 0;
        //采用set，因为还要保证不重复
        set<int>layer;
        int index;
        int step=0;
        
        layer.insert(0);
        while(!layer.empty()){
            ++step;
            set<int>tmp;
            for(auto i=layer.begin();i!=layer.end();++i){
                for(index=nums[*i];index>0;--index){
                    int pos=*i+index;
                    if(pos>=len-1)
                        return step;
                    if(layer.find(pos)!=layer.end())
                        continue;
                    tmp.insert(pos);
                }
            }
            layer.swap(tmp);            
        }
        //尽管保证必有解
        return -1;
    }
};
