class Solution {
public:
    bool isMatch(string s, string p) {
        /*grep的一个弱化*/
        //属于一种不确定有限状态自动机
        //可以运用回溯
        return _is_Match(s,p,0,0);
    }
private:
    bool _is_Match(string& s, string& p, int pos1, int pos2 ){
        //辅助回溯
        int lens=s.size();
        int lenp=p.size();
        if(lens==pos1 && lenp==pos2)
            return true;
        if(lenp==pos2)
            return false;
        if(lens==pos1){
            for(;pos2<lenp;++pos2)
                if(p[pos2]!='*')
                    return false;
            return true;
        }
        //这里有bug，可能越界
        
        
        
        if(p[pos2]==s[pos1] || p[pos2]=='?')
            if(_is_Match(s,p,pos1+1,pos2+1))
                return true;
        
        if(p[pos2]=='*'){
            //*匹配0个
            if(_is_Match(s,p,pos1,pos2+1))
                return true;
            //*匹配1个
            if(_is_Match(s,p,pos1+1,pos2+1))
                return true;
            //*匹配多个
            if(_is_Match(s,p,pos1+1,pos2))
                return true;
        }
        
        return false;
    }
};
