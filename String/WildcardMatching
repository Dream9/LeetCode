class Solution {
public:
    bool isMatch(string s, string p) {
        /*grep的一个弱化*/
        //属于一种不确定有限状态自动机
        //可以运用回溯
        //return _is_Match(s,p,0,0);
        //然后就TLE了
        //采用动态规划记录中间状态
        return _dp(s,p);
    }
private:
    /*这种方法TLE了，所有情况遍历一遍，存在重复计算，可以考虑dp记录一下中间结果*/
    bool _is_Match(string& s, string& p, int pos1, int pos2 ){
        //辅助回溯
        int lens=s.size();
        int lenp=p.size();
        if(lens==pos1 && lenp==pos2)
            return true;
        if(lenp==pos2)
            return false;
        if(lens==pos1){
            for(;pos2<lenp;++pos2)
                if(p[pos2]!='*')
                    return false;
            return true;
        }
        
        if(p[pos2]==s[pos1] || p[pos2]=='?')
            if(_is_Match(s,p,pos1+1,pos2+1))
                return true;
        
        if(p[pos2]=='*'){
            //*匹配多个
            if(_is_Match(s,p,pos1+1,pos2))
                return true;
            //*匹配1个
            if(_is_Match(s,p,pos1+1,pos2+1))
                return true;
            //*匹配0个
            if(_is_Match(s,p,pos1,pos2+1))
                return true;
        }
        
        return false;
    }
private:
    bool _dp(string& s,string& p){
        int lens=s.size();
        int lenp=p.size();
        
        vector<vector<bool>>match(lenp+1,vector<bool>(lens+1,false));
        match[0][0]=true;
        //模式串与空串匹配时的情况，作为边界条件
        for(int i=1;i<=lenp;++i){
            if(p[i-1]=='*')
                match[i][0]=match[i-1][0];
        }
        //状态转移过程
        for(int i=1;i<=lenp;++i){
            for(int j=1;j<=lens;++j){
                //*可以空匹配
                if(p[i-1]=='*')
                    match[i][j]=match[i-1][j] || match[i][j-1];
                else
                    match[i][j]=match[i-1][j-1] && (p[i-1]=='?' || p[i-1]==s[j-1]);
            }
        }
        return match[lenp][lens];
    }
};
