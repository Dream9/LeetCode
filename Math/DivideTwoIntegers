class Solution {
public:
    int divide(int dividend, int divisor) {
        /*除法可以看成减法*/
        /*为了加快收敛速度，可以通过移位找到可减的最大值*/
        /*此外，就是边界条件的检查了*/
        
        int ans=0;
        int i=0;
        bool flag=(dividend<0&&divisor>0 || dividend>0&&divisor<0)?true:false;//符号位
        //边界检查
        
        if(divisor==0)
            return INT_MAX;
        if(dividend==INT_MIN)
        {
            dividend+=abs(divisor);
            if(divisor==-1)
            {
                return INT_MAX;
            }
            ans++;
        }
        if(divisor==INT_MIN)
            return ans;
        
        
        dividend=abs(dividend);
        divisor=abs(divisor);
        int abs_D=dividend>>1;//////注意这里，必须与右移一位的值进行计较，否则会溢出！！
        //return abs_d;
        while(divisor<=(abs_D)){
            divisor<<=1;
            ++i;
        }
        //return i;
        /*实际求除数处理*/
        /////不是2<<i。。。。。
        i=1<<i;
        while(i>0){
            if(divisor<=dividend){
                ans+=i;
                dividend-=divisor;            
            }
            i>>=1;
            divisor>>=1;
        }
        /*此时的dividend既为余数，故也可以进行mod运算*/
        return flag?-ans:ans;
        
    }
};
