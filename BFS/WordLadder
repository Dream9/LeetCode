class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        /*抽象为权重为1的连通图*/      
        /*BFS搜索*/
        //0标识不连通
        int count=1;//包含自己
        unordered_set<string>layer;
        unordered_set<string>pool(wordList.begin(),wordList.end());
        
        if(pool.find(endWord)==pool.end())
            return 0;
        
        layer.insert(beginWord);
        while(!pool.empty()){
            unordered_set<string>next;
            for(string word:layer){
                
                //不超时的判断
                //优化：set额外拷贝，不进行函数调用
                int len=word.size();
                for(int i=0;i<len;++i){
                    string wtmp=word;
                    for(char c='a';c<='z';++c){
                        wtmp[i]=c;
                        if(pool.find(wtmp)!=pool.end()){
                            pool.erase(wtmp);
                            next.insert(wtmp);
                        }
                    }
                }
                
                //TLE
                //unordered_set<string>tmp=pool;
                //for(string cur:pool){
                //    if(_is_link(word,cur)){
                //        next.insert(cur);
                //        pool.erase(cur);
                //    }
                //}
                //
            }
            //没有下一层
            if(next.empty())
               return 0;
            
            count+=1;
            if(next.find(endWord)!=next.end())
                return count;
            layer=std::move(next);
        }
        return 0;
    }
private:
    bool _is_link(string &f,string &s){
        /*假定长度一致*/
        int diff=0;
        int len=f.size();
        for(int i=0;diff<2 && i<len;++i){
            if(f[i]!=s[i])
                diff++;
        }
        //return diff<2;
        //完全一样，相当于自环。。
        return diff==1;
    }
};
