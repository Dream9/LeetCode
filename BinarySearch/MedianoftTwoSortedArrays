class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        //log级时间，那么明显采用二分
        //由于中间值可能有两个，因此偶数时，运算两次 
        int m=nums1.size();
        int n=nums2.size();
        int index=(m+n)/2;
        
        if((m+n)&0x1)
            return _find(nums1,0,m,nums2,0,n,index+1); 
        int first=_find(nums1,0,m,nums2,0,n,index);
        int second=_find(nums1,0,m,nums2,0,n,1+index);
        return (first+second)/2.0;
    }
private:
    int _find(vector<int>&nums1,int l1,int r1,
               vector<int>&nums2,int l2,int r2,int order){
        if(r2-l2<r1-l1) 
            return _find(nums2,l2,r2,nums1,l1,r1,order);
        if(r1-l1<=0)
            return nums2[l2+order-1];
        if(order==1)
            return min(nums1[l1],nums2[l2]);
        
       // int pivot=((order>>1)<(r1-l1))?(order>>1):(r1-l1);//nums1中的部分
        int pivot=min(order/2,r1-l1);
        int last=order-pivot;//剩余部分
        if(nums1[l1+pivot-1]>nums2[l2+last-1])
            return _find(nums1,l1,r1,nums2,l2+last,r2,order-last);
        else if(nums2[l2+last-1]>nums1[l1+pivot-1])
            return _find(nums1,l1+pivot,r1,nums2,l2,r2,order-pivot);
        else
            return nums1[l1+pivot-1];
    }

};
/*
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int lenm=nums1.size();
        int lenn=nums2.size();
        if(lenm>lenn)
            return findMedianSortedArrays(nums2,nums1);
        int lmax=lenm;
        int lmin=0;
        int i,j;
        int k=(lenm+lenn+1)/2;
        int mid;
        while(lmax>=lmin){
            i=(lmax+lmin)/2;
            j=k-i;
            if(i>lmin&&nums1[i-1]>nums2[j])
                lmax=i-1;
            else if(i<lmax&&nums2[j-1]>nums1[i])
                lmin=i+1;
            else{
                if(i==0)
                    mid=nums2[j-1];
                else if(j==0)
                    mid=nums1[i-1];
                else 
                    mid=max(nums1[i-1],nums2[j-1]);
                
                if((lenm+lenn)&0x1)
                    return mid;
                else{
                    if(i==lenm)
                        return (mid+nums2[j])/2.0;
                    else if(j==lenn)
                        return (mid+nums1[i])/2.0;
                    else
                        return (min(nums1[i],nums2[j])+mid)/2.0;
                }
            }
        }
    }
};
*/
