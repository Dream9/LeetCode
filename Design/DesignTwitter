class Twitter {
private:
    typedef pair<int,int> tweet;//分别记录时间序列和消息id
    typedef struct{
        //在这种实现方式中，将自己发的消息与他人的消息予以区分，实际上两者是可以合并的
        //都归结到订阅者follower之中，只不过自己一定会订阅自己，并且不可取消
        vector<tweet> message;
        vector<int> follower;
    }ItemType;
public:
    /** Initialize your data structure here. */
    Twitter():__g(0) {
        
    }
    
    /** Compose a new tweet. */
    void postTweet(int userId, int tweetId) {
        auto iter=__dict.find(userId);
        if(iter==__dict.end()){
            ItemType* tmp=new ItemType;
            tmp->message.emplace_back(__g++,tweetId);
            __dict.insert({userId,tmp});
        }
        else{
            iter->second->message.emplace_back(__g++,tweetId);
        }
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    vector<int> getNewsFeed(int userId) {
        auto iter=__dict.find(userId);
        if(iter==__dict.end())
            return{};
        vector<int>out;
        map<int,int>top10;
        for(const tweet& cur:iter->second->message){
            top10.insert(cur);
            if(top10.size()>10)
                top10.erase(top10.begin());
        }
        for(int id:iter->second->follower){
            auto user=__dict.find(id);
            //TODO:-1用户超过一定比例时应当进行清除
            if(user==__dict.end())
                continue;
            for(const tweet& cur:user->second->message){
                top10.insert(cur);
                if(top10.size()>10)
                    top10.erase(top10.begin());
            }
        }
        int len=top10.size();
        out.reserve(len);
        transform(top10.begin(),top10.end(),back_inserter(out),[](pair<int,int>item){return item.second;});
        reverse(out.begin(),out.end());
        return out;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    //不存在的用户要自动生成
    void follow(int followerId, int followeeId) {
        auto iter=__dict.find(followerId);
        if(iter==__dict.end()){
            auto tmp=new ItemType;
            iter=__dict.insert({followerId,tmp}).first;
        }
        if(__dict.find(followeeId)==__dict.end()){
            auto tmp=new ItemType;
            __dict.insert({followeeId,tmp});
        }
        iter->second->follower.emplace_back(followeeId);
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    //采用延迟删除的方式，当-1用户超过一定比例时应当予以集中remove+erase
    void unfollow(int followerId, int followeeId) {
        auto iter=__dict.find(followerId);
        if(iter==__dict.end())
            return;
        for_each(iter->second->follower.begin(),iter->second->follower.end(),
                 [=](int &cur){if(cur==followeeId)cur=-1;});//延迟删除
    }
private:
    unordered_map<int,ItemType*>__dict;
    int __g;
};

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter* obj = new Twitter();
 * obj->postTweet(userId,tweetId);
 * vector<int> param_2 = obj->getNewsFeed(userId);
 * obj->follow(followerId,followeeId);
 * obj->unfollow(followerId,followeeId);
 */
