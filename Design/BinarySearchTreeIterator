/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
//之中迭代方式就是中序遍历
//借助栈实现非迭代的遍历
class BSTIterator {
public:
    BSTIterator(TreeNode* root) {
        /*记录栈*/
        while(root){
            st.push(root);
            root=root->left;
        }
    }
    
    /** @return the next smallest number */
    int next() {
        auto cur=st.top();
        int out=cur->val;
        cur=cur->right;
        st.pop();
        
        //注意是平均意义上的的常数级别
        while(cur){
            st.push(cur);
            cur=cur->left;
        }
        return out;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !st.empty();
    }
private:
    stack<TreeNode*>st;
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
