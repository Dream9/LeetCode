class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        //新的思路，任意中间子串的和是两个以起点开始的累加和的差
        
        int len=nums.size();
        if(len<=1)
            return 0;
        
        unordered_map<int,int>dict;
        dict.insert({0,-1});//为了从起点开始类和得到0的情况
        
        int out=0;
        int sum=0;
        for(int i=0;i<len;++i){
            sum+=nums[i]==0?1:-1;
            
            if(dict.find(sum)!=dict.end())
                out=max(out,i-dict[sum]);
            else
                dict.insert({sum,i});
        }
        
        return out;
        
        //TLE了
        ////dp
        //int len=nums.size();
        //if(len<=1)
        //    return 0;
        //
        ////压缩空间
        //vector<int>dp(len,0);
        //int count=0;
        //int out=0;
        //for(int i=0;i<len;++i){
        //    count=nums[i]==0?count+1:count-1;
        //    dp[i]=count;
        //    if(count==0)
        //        out=i+1;
        //}
        //if(out==len)
        //    return out;
        //
        //
        //for(int i=1;i<len-1;++i){
        //    int offset=nums[i-1]==0?1:-1;
        //    for(int j=i;j<len;++j){
        //        dp[j]=dp[j]-offset;
        //        if(dp[j]==0)
        //            out=max(out,j-i+1);
        //    }
        //    //for test
        //    //if(i==2)
        //    //    return dp[0]+dp[1]*10+dp[2]*100+dp[3]*1000+dp[4]*10000+dp[5]*100000+dp[6]*1000000+dp[7]*10000000;
        //}
        //
        //return out;
    }
};
