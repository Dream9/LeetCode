class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {     
        //循环合并&展开
        //利用直接定址表的方式代替hash
        for(int i=0;i<9;++i){
            vector<int>flagr(9,0);
            vector<int>flagc(9,0);
            for(int j=0;j<9;j+=3){
                if(board[i][j]!='.'&&(flagr[board[i][j]-'1']++!=0))
                    return false;
                if(board[j][i]!='.'&&(flagc[board[j][i]-'1']++!=0))
                    return false;
                if(board[i][j+1]!='.'&&(flagr[board[i][j+1]-'1']++!=0))
                    return false;
                if(board[j+1][i]!='.'&&(flagc[board[j+1][i]-'1']++!=0))
                    return false;
                if(board[i][j+2]!='.'&&(flagr[board[i][j+2]-'1']++!=0))
                    return false;
                if(board[j+2][i]!='.'&&(flagc[board[j+2][i]-'1']++!=0))
                    return false;
            }
        }        
        //3*3判断
        for(int i=0;i<=6;i+=3){
            for(int j=0;j<=6;j+=3){
                vector<int>flag(9,0);
                for(int m=0;m<3;++m){
                    for(int n=0;n<3;++n){
                        if((board[i+m][j+n]!='.')&&
                           (flag[board[i+m][j+n]-'1']++!=0))
                            return false;
                    }
                }
            }
        }
        return true;
        
    }
};
