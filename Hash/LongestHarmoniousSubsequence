class Solution {
public:
    int findLHS(vector<int>& nums) {
        int len=nums.size();
        if(len<=1)
            return 0;
        
        //这道题最难的一点是对subsequence的翻译。。。。
        //此处的翻译是指任意的组合，既不是子串，也不是子序列，是组合？？？？？
        //？？？？？？？？？？？？？？？？？？？？？？
        //？？？？？？？？？？？？？？？？？？？？？？
        //？？？？？？？？？？？？？？？？？？？？？？
        //？？？？？？？？？？？？？？？？？？？？？？
        //？？？？？？？？？？？？？？？？？？？？？？
        //？？？？？？？？？？？？？？？？？？？？？？
        //？？？？？？？？？？？？？？？？？？？？？？
        //？？？？？？？？？？？？？？？？？？？？？？
        //？？？？？？？？？？？？？？？？？？？？？？
        //？？？？？？？？？？？？？？？？？？？？？？
        //我也是服了
        //既然不在乎相对顺序，那么只要用hash统计一次，然后相差1的次数和的最大者即可
        unordered_map<int,int>dict;
        for(int i:nums)
            ++dict[i];
        
        int out=0;
        for(auto item:dict){
            auto iter=dict.find(item.first + 1);
            if(dict.end()!=iter){
                out= max(out,item.second+iter->second);
            }
        }
        return out;
        
        
        //vector<int>dp(len,1);
        //
        //for(int i=1;i<len;++i){
        //    int cur =nums[i]-1;
        //    int j=i-1;
        //    while(j>=0 && (nums[j]==cur || nums[j] ==cur+1))
        //        --j;
        //    
        //    cur=nums[i]+1;
        //    int k=i-1;
        //    while(k>=0 && (nums[k]==cur ||nums[k] == cur-1))
        //        --k;
        //    
        //    dp[i]= max(dp[i-1], max(i-j,i-k));
        //    
        //}
        //
        //return dp[len-1];
    }
};
