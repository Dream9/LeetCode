struct pair_hash{
    template<typename T1,typename T2>
    size_t operator()(const pair<T1,T2>&p) const{
        return hash<T1>()(p.first)^
               hash<T2>()(p.second);
    }
};
class Solution {
public:
    Solution(int n_rows, int n_cols) {
        _n=n_rows;
        _m=n_cols;
    }
    
    vector<int> flip() {
        int first=rand()%_n;
        int second=rand()%_m;
        if(dict.find({first,second})!=dict.end()){
            return flip();
        }
        dict.insert({first,second});
        return {first,second};
    }
    
    void reset() {
        dict.clear();
    }
private:
    int _n;
    int _m;
    unordered_set<pair<int,int>,pair_hash>dict;
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(n_rows, n_cols);
 * vector<int> param_1 = obj->flip();
 * obj->reset();
 */
