class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        //0-1背包问题的衍生
        //容量C要求变成了双份的要求m,n
        //那么最少需要二维数组进行计算（空间优化后）
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));
       
        int len=strs.size();
        for(int i=0;i<len;++i){
            int zero=count(strs[i].begin(),strs[i].end(),'0');
            int one=strs[i].size()-zero;
            
            for(int a=m;a>=zero;--a){
                for(int b=n;b>=one;--b){
                    dp[a][b]=max(dp[a][b],1+dp[a-zero][b-one]);
                }
            }
        }
        
        return dp[m][n];
        
        //以下为dfs,显然超时了
        //unordered_map<string,pair<int,int>>dict;
        //int ans=0;
        //_dfs(strs,m,n,dict,ans,0,0);
        //return ans;
    }
private:
    void _dfs(vector<string>&strs,
             int m,
             int n,
             unordered_map<string,pair<int,int>>&dict,
             int& ans,
             int pos,
             int cur){
        if(m<0 || n<0 || strs.size()<=pos){
            ans=max(ans,cur);
            return;
        }
        
        auto iter=dict.find(strs[pos]);
        if(iter!=dict.end()){
            if(m>=iter->second.first && n>=iter->second.second){
                _dfs(strs,m-iter->second.first,n-iter->second.second,
                    dict,ans,pos+1,cur+1);
            }
        }
        else{
            int f=count(strs[pos].begin(),strs[pos].end(),'0');
            int s=strs[pos].size()-f;
            dict[strs[pos]]=make_pair(f,s);
            if(m>=f && n>=s){
                _dfs(strs,m-f,n-s,dict,ans,pos+1,cur+1);
            }
        }
        _dfs(strs,m,n,dict,ans,pos+1,cur);
        
    }
};
