class Solution {
public:
    int minDistance(string word1, string word2) {
        //本质就是就最长公共序列
        int m = word1.size();
        int n = word2.size();
        if(m==0 || n==0)
            return max(m,n);
        
        vector<vector<int>> dp(m, vector<int>(n, 0));
        //边界条件
        char c=word2[0];
        dp[0][0] = c==word1[0];
        for(int i=1;i<m;++i){
            dp[i][0] = dp[i-1][0] ? 1 : (c==word1[i] ? 1 : 0); 
        }
        c=word1[0];
        for(int i=1;i<n;++i){
            dp[0][i] = dp[0][i-1] ? 1 : (c==word2[i] ? 1 : 0); 
        }

        //dp
        for(int i=1;i<m;++i){
            for(int j=1;j<n;++j){
                if(word1[i]==word2[j])
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
            }
        }

        int M=dp[m-1][n-1];
        return m-M+n-M;
    }
};
