class Solution {
public:
    int minCut(string s){
        if(s.empty())
            return 0;
        int len=s.size();
        vector<vector<bool>>dp(len,vector<bool>(len,false));
        vector<int>cut(len,0);
        for(int i=0;i<len;++i){
            cut[i]=i;
            for(int j=0;j<=i;++j){
                if(s[j]==s[i] && (j+2>=i || dp[j+1][i-1])){
                    dp[j][i]=true;
                    cut[i]=j==0?0:min(cut[i],cut[j-1]+1);
                }
            }
        }
        //for(int i=1;i<len;++i){
        //   cut[i]=dp[0][i]?0:cut[i-1]+1;
        //}
        return cut[len-1];
    }
    
    //以下版本均超时 
    int _minCut_TLE_(string s) {
        /*dp+dfs*/
        if(s.empty())
            return 0;
        int len=s.size();
        vector<vector<bool>>dp(len,vector<bool>(len,false));
        for(int i=0;i<len;++i){
            for(int j=0;j<=i;++j){
                if(s[j]==s[i] && (j+2>=i || dp[j+1][i-1]))
                    dp[j][i]=true;
            }
        }
        
        int num=len-1;
        int part=-1;
        _Divide(s,0,part,num,dp);
        return num;
    }
private:
    void __Divide(string &s,int index,int &part,int &num,vector<vector<bool>> &dp){
        //Greedy？
        int len=s.size();
        if(index==len){
            num=min(num,part);
            return;
        }
        for(int i=len-1;i>=i;++i){
            if(dp[index][i]){
                ++part;
                _Divide(s,i+1,part,num,dp);
                //--part;
                return;
            }
        }
    }
    void _Divide(string &s,int index,int &part,int &num,vector<vector<bool>> &dp){
        int len=s.size();
        if(index==len){
            num=min(num,part);
            return;
        }
        for(int i=index;i<len;++i){
            if(dp[index][i]){
                ++part;
                _Divide(s,i+1,part,num,dp);
                --part;
            }
        }
    }
};
