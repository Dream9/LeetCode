class Solution {
public:
    int minDistance(string word1, string word2) {
        //可能是采用最长公共序列的方式
        //测试可行
        //
        int m=word1.size();
        int n=word2.size();
        if(m==0)
            return n;
        if(n==0)
            return m;
        if(word1==word2)
            return 0;
        ++n;
        ++m;
        vector<vector<int>>dp(n,vector<int>(m,0));
        //边界条件
        for(int i=0;i<m;++i)
            dp[0][i]=i;
        for(int i=0;i<n;++i)
            dp[i][0]=i;
        
        //其他
        for(int i=1;i<n;++i){
            for(int j=1;j<m;++j){
                if(word2[i-1]==word1[j-1])
                    dp[i][j]=dp[i-1][j-1];
                else
                    dp[i][j]=1+min(dp[i-1][j-1],
                                   min(dp[i-1][j],dp[i][j-1]));
            }
        }
        return dp[n-1][m-1];
    }
};
