//pair没有默认的hash函数
struct pair_hash
{
    template<typename T1,typename T2>
    size_t operator() (const std::pair<T1, T2>& p) const
    {
        auto h1 = std::hash<T1>()(p.first);
        auto h2 = std::hash<T2>()(p.second);
        return h1 ^ h2;
    }
};

class Solution {
public:
    typedef pair<int,int> Ty;
    int findTargetSumWays(vector<int>& nums, int S) {
        //通过记忆数组减少计算
        unordered_map<Ty,int,pair_hash> notes;
        return _bt(nums,0,S,0,notes);
    }
private:
    int _bt(vector<int>& nums,
            int pos,
            int target,
            int cur,
            unordered_map<Ty,int,pair_hash>& notes){
        if(pos>=nums.size())
            return cur==target;
        auto iter=notes.find(Ty(pos,cur));
        if(iter!=notes.end())
            return iter->second;
        
        int first=_bt(nums,pos+1,target,cur+nums[pos],notes);
        int second=_bt(nums,pos+1,target,cur-nums[pos],notes);
        
        notes.insert({Ty(pos,cur),first+second});
        return first+second;
    }
};

//直接dfs也是可以的，因为题目中数组大小有限，深度可以接受
//class Solution {
//public:
//	int findTargetSumWays(vector<int>& nums, int S) {
//		//if(nums.size()%2 != S%2)
//		//    return 0;
//		return _dfs(nums, 0, S, 0);
//	}
//private:
//	int _dfs(vector<int>& nums, int cur, int target, int pos) {
//		if (pos >= nums.size()) {
//			if (cur == target)
//				return 1;
//			return 0;
//		}
//
//		int first = _dfs(nums, cur + nums[pos], target, pos + 1);
//		int second = _dfs(nums, cur - nums[pos], target, pos + 1);
//		return first + second;
//	}
//};




