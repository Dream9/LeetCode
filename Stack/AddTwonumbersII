**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        //很明显通过栈进行反转
        ListNode* h1=l1;
        ListNode* h2=l2;
        
        stack<int>s1;
        stack<int>s2;
        while(l1){
            s1.push(l1->val);
            l1=l1->next;
        }
        while(l2){
            s2.push(l2->val);
            l2=l2->next;
        }
        
        ListNode*out=nullptr;
        int last=0;
        while(!s1.empty() || !s2.empty()){
            int v1;
            int v2;
            if(s1.empty()){
                v1=0;
            }
            else{
                v1=s1.top();
                s1.pop();
            }
            
            if(s2.empty()){
                v2=0;
            }
            else{
                v2=s2.top();
                s2.pop();
            }
            
            int val=v1+v2+last;
            int now=val>9?val-10:val;
            last=val>9?1:0;
            ListNode* tmp=new ListNode(now);
            if(out){
                tmp->next=out;
            }
            out=tmp;
        }
        if(last>0){
            ListNode* tmp=new ListNode(1);
            tmp->next=out;
            return tmp;
        }
        return out;
    }
    
    //一次性想做太多
    //ListNode* _addTwoNumbers(ListNode* l1, ListNode* l2) {
    //    ans=nullptr;
    //    h1=l1;
    //    h2=l2;
    //    
    //    int cur=__add(l1,l2);
    //    if(cur>0){
    //        ListNode *n=new ListNode(1);
    //        n->next=ans;
    //        return n;
    //    }
    //    return ans;
    //}
    //int __add(ListNode* l1, ListNode* l2){
    //    if(!l1 && !l2){
    //        if(!ans)
    //            ans=h1;
    //        return 0;
    //    }
    //    int cur=0;
    //    int value=0;
    //    if(l1 && l2){
    //        cur=__add(l1->next,l2->next);
    //    }
    //    else if(l1 &&!l2){
    //        ans=h1;
    //        cur=__add(l1->next,l2);
    //        value=cur+l1->val;
    //        l1->val=value>9?value-10:value;
    //        return value>9?1:0;
    //    }
    //    else{
    //        ans=h2;
    //        cur=__add(l1,l2->next);
    //        value=cur+l2->val;
    //        l2->val=value>9?value-10:value;
    //        return value>9?1:0;
    //    }
    //    
    //    value=cur+l1->val+l2->val;
    //    if(ans==h1){
    //        l1->val=value>9?value-10:value;
    //        return value>9?1:0;
    //    }
    //    l2->val=value>9?value-10:value;
    //    return value>9?1:0;
    //}
    //
    //ListNode* ans;
    //ListNode* h1;
    //ListNode* h2;
};
