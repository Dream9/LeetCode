class MyQueue {
private:
    /*本质就是换向即可*/
    stack<int>data;
    stack<int>tmp;
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        tmp.push(x);
        
        //stack<int>tmp;
        //while(!st.empty()){
        //    tmp.push(st.top());
        //    st.pop();
        //}
        //st.push(x);
        //while(!tmp.empty()){
        //    st.push(tmp.top());
        //    tmp.pop();
        //}
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        clear_tmp();
        int ret=data.top();
        data.pop();
        return ret;
    }
    
    /** Get the front element. */
    int peek() {
        clear_tmp();
        return data.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return data.empty() && tmp.empty();
    }
private:
    void clear_tmp(){
        if(!data.empty())
            return ;
        while(!tmp.empty()){
            data.push(tmp.top());
            tmp.pop();
        }
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
