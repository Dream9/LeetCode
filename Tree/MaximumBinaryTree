/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        //特殊规则的树的建立
        
        if(nums.empty())
            return nullptr;
        
        TreeNode* out = new TreeNode(nums[0]);
        for_each(nums.begin()+1,nums.end(),[&](int val){
            out = _insert(out, val);
        });
        
        return out;
    }
private:
    //brief:从左到右遍历构建树时，只需遵循val大于root,则零root成为其左子树，
    //      否则val必然位于其右子树上面
    TreeNode* _insert(TreeNode* root, int val){
        if(root->val < val){
            TreeNode* new_root = new TreeNode(val);
            new_root->left = root;
            return new_root;
        }
        
        if(!root->right){
            root->right = new TreeNode(val);
            return root;
        }
        
        root->right = _insert(root->right, val);
        return root;
    }
};
