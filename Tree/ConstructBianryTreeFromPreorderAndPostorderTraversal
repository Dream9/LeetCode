/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    typedef vector<int> VT;
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        /*把后序遍历倒着看，就可以先找到root*/
        if(inorder.empty() || inorder.size()!=postorder.size())
            return nullptr;
        return tree(inorder,postorder,0,0,inorder.size()-1);
    }
private:
    TreeNode* tree(VT& inorder,VT& postorder,int inleft,int postleft,int last){
        if(postleft>last)
            return nullptr;
        TreeNode* root=new TreeNode(postorder[last]);
        
        //找到root在inorder中的位置
        int index=0;
        int len=last-postleft;
        while(index<=len && inorder[inleft+index]!=postorder[last]){
            ++index;
        }
        
        //注意两个向量的范围，由于采用了中序遍历和后序遍历，因此是错开的
        root->left=tree(inorder,postorder,inleft,postleft,postleft+index-1);
        root->right=tree(inorder,postorder,inleft+index+1,postleft+index,last-1);
        return root;
    }
};
