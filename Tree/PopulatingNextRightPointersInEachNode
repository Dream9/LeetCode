/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() {}

    Node(int _val, Node* _left, Node* _right, Node* _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
public:
    Node* connect(Node* root) {
        /*主要两种情况：
        **1.指向父节点的右节点
        **2.指向父节点的next的左节点
        */
        
        _Con(root);
            
        //_Connect(root);
            
        return root;
    }
 private:
    void _Connect(Node* root){
        if(root==nullptr)
            return;
        Node* left=root->left;
        if(left==nullptr)
            return;
        Node* cur=left;
        while(cur && root){
            if(root->left==cur){
                cur->next=root->right;
                cur=cur->next;
            }
            else{
                root=root->next;
                if(root){
                    cur->next=root->left;
                    cur=cur->next;
                }
            }
        }
        _Connect(left);
    }

    /*利用递归实现*/
    void _Con(Node* root){
        if(!root)
            return;
        if(root->left){
            root->left->next=root->right;
            root->right->next=(root->next?root->next->left:
                                          nullptr);
            _Con(root->left);
            _Con(root->right);
        }
    }
};
