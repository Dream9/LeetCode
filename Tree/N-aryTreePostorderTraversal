/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    vector<int> postorder(Node* root) {
        //题目强制要求非递归
        if(!root)
            return {};
        
        vector<int>out ;
        stack<Node*> st;
        st.push(root);
        
        
        //后序遍历的非递归版本确实比较繁琐，主要是一个节点可能会两次经过他，第一次不可以
        //访问其元素，第二次的时候就是LRN回来的时候，此时应该访问
        Node* prev =nullptr;
        while(!st.empty()){
            root= st.top();
            if(root->children.empty()){
                out.emplace_back(root->val);
                st.pop();
                prev = root;
                continue;
            }
            else if(prev){
                //判断是否是第二次经过这里
                bool flag =false;
                for(Node* cur:root->children){
                    if(cur==prev){
                        flag=true;
                        break;
                    }
                }
                if(flag){
                    st.pop();
                    out.emplace_back(root->val);
                     prev = root;
                    continue;
                }
            }
            
            for_each(root->children.rbegin(), root->children.rend(),
                    [&](Node* cur){
                        st.push(cur);
                    });
            
        }
        
        return out;
        
    }
};
