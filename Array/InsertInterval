/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        /*关键在于只需合并受影响区域的区间即可*/
        if(intervals.empty())
            return {newInterval};
        
        int len = intervals.size();
        vector<Interval>out;
        out.reserve(len+1);
        
        while(i<len && intervals[i].end<newInterval.start){
            out.emplace_back(intervals[i]);
            ++i;
        }
        /*针对合并区间*/
        int right=newInterval.end;
        int left=newInterval.start;
        while(i<len && intervals[i].start<=newInterval.end){
            right=max(right,intervals[i].end);
            left=min(left,intervals[i].start);
            ++i;
        }
        out.emplace_back(left,right);
        out.insert(out.end(),intervals.begin()+i,intervals.end());
        return out;
        
    }
};
