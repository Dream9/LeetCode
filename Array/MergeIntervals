/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
struct less_Interval{
    bool operator() (Interval& i1,Interval& i2){
        bool first=i1.start<i2.start;
        bool equal=i1.start==i2.start;        
        bool second=i1.end<i2.end;
        return first?true:(equal?(second?true:false):false);
    }
};
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        /*先排序，然后合并*/
        if(intervals.empty())
            return {} ;
        int len=intervals.size();
        vector<Interval> out;
        sort(intervals.begin(),intervals.end(),less_Interval());
        int i=0;
        
        while(i<len){
            int left=intervals[i].start;
            int right=intervals[i].end;
            while(i<len-1 && ((right<=intervals[i+1].end &&
                 right>=intervals[i+1].start) ||
                 right>=intervals[i+1].end)){
                right=max(intervals[i+1].end,right);
                ++i;
            }
            out.emplace_back(left,right);
            ++i;
        }
        return out;
    }
private:
    
